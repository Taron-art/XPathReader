name: Create release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write  # enable GitHub OIDC token issuance for this job

jobs:
  release:

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on                

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Compute VersionPrefix and VersionSuffix
      shell: pwsh
      env:
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_HEAD_REF: ${{ github.head_ref }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
      run: |
        # Get raw tag like v1.2.3
        $tagRef = $env:GITHUB_REF
        $tagName = $tagRef -split '/' | Select-Object -Last 1
      
        # Remove leading 'v' if present to produce numeric prefix
        $versionPrefix = if ($tagName.StartsWith('v')) { $tagName.Substring(1) } else { $tagName }
      
        # Sanitize just in case: strip any prerelease part if present (but prerelease is derived from branch only)
        if ($versionPrefix -match '-') 
        {
          $versionPrefix = $versionPrefix.Split('-')[0]
        }
      
        # Determine branch name to derive prerelease suffix
        $raw = (git branch -r --contains $env:GITHUB_REF) -split "`n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne '' } | Select-Object -First 1
        $branch = if ($raw) { ($raw -split '/')[ -1 ] } else { '' }
        
        if ([string]::IsNullOrEmpty($branch)) 
        {
          throw "branch not found"
        }
        
        Write-Output "Branch is $branch."
        
        # Derive VersionSuffix based on branch patterns
        $shortSha = $env:GITHUB_SHA.Substring(0,8)
        if ($branch -eq 'main')
        {
          $versionSuffix = ''
        }
        elseif ($branch -eq 'develop')
        {
          $versionSuffix = 'beta'
        }
        else
        {
          throw "Branch $branch is not supported for release creation"
        }
      
        Write-Host "Computed VersionPrefix: $versionPrefix"
        Write-Host "Computed VersionSuffix: $versionSuffix"
      
        # Export for later steps
        echo "VERSION_PREFIX=$versionPrefix" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "VERSION_SUFFIX=$versionSuffix" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Add-Content -Path $env:GITHUB_OUTPUT -Value "branch=$branch"
    
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: | 
          8.0.x
          9.0.x
          
    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test src/XPathReader -c Release -p:Platform="Any CPU"
      
    # Build
    - name: Create NuGet package
      shell: pwsh
      env:
          VERSION_PREFIX: ${{ env.VERSION_PREFIX }}
          VERSION_SUFFIX: ${{ env.VERSION_SUFFIX }}
      run: dotnet pack src/XPathReader/XPathReader/XPathReader.csproj -c Release -p:Platform="Any CPU" /p:VersionPrefix="$($env:VERSION_PREFIX)" /p:VersionSuffix="$($env:VERSION_SUFFIX)" -o src\Release
    
    - name: Add the created package to test project and run tests
      shell: pwsh
      env:
          VERSION_PREFIX: ${{ env.VERSION_PREFIX }}
          VERSION_SUFFIX: ${{ env.VERSION_SUFFIX }}
      run: |
          dotnet restore "Package Tests\PackageUsage\PackageUsage.NetFramework.Tests\PackageUsage.NetFramework.Tests.csproj"
          dotnet restore "Package Tests\PackageUsage\PackageUsage.Net.Tests\PackageUsage.Net.Tests.csproj"
          dotnet add "Package Tests\PackageUsage\PackageUsage.NetFramework.Tests\PackageUsage.NetFramework.Tests.csproj" package  ARTX.XPathReader -s "src\Release" --prerelease
          dotnet add "Package Tests\PackageUsage\PackageUsage.Net.Tests\PackageUsage.Net.Tests.csproj" package  ARTX.XPathReader -s "src\Release" --prerelease
          dotnet test "Package Tests\PackageUsage\PackageUsage.NetFramework.Tests\PackageUsage.NetFramework.Tests.csproj" /p:VersionPrefix="$($env:VERSION_PREFIX)" /p:VersionSuffix="$($env:VERSION_SUFFIX)"
          dotnet test "Package Tests\PackageUsage\PackageUsage.Net.Tests\PackageUsage.Net.Tests.csproj" /p:VersionPrefix="$($env:VERSION_PREFIX)" /p:VersionSuffix="$($env:VERSION_SUFFIX)"
    
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: src/Release/*
        fail_on_unmatched_files: true
        prerelease: ${{ steps.source.outputs.branch == 'develop' && true || false }}
        generate_release_notes: true
    
    - name: NuGet login (OIDC â†’ temp API key)
      uses: NuGet/login@v1
      id: login
      with:
        user: ${{ secrets.NUGET_USER }}
          
    - name: Push to NuGet
      shell: pwsh
      run: |
        Get-ChildItem src/Release -Filter *.nupkg | ForEach-Object {
          dotnet nuget push $_.FullName `
            --api-key "${{ steps.login.outputs.NUGET_API_KEY }}" `
            --source https://api.nuget.org/v3/index.json
        }
