name: Create release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write  # enable GitHub OIDC token issuance for this job

jobs:
  release:

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on                

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Compute version from tag
      shell: pwsh
      run: |
          $ref = '${{ github.ref }}'
          $result = & ./scripts/compute-version.ps1 -Ref $ref
          # Export to GitHub Actions environment
          "VERSION_PREFIX=$($result.VersionPrefix)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "VERSION_SUFFIX=$($result.VersionSuffix)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "branch=$($result.Branch)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      env:
          GITHUB_ENV: ${{ github.env }}
          GITHUB_OUTPUT: ${{ github.output }}
    
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: | 
          8.0.x
          9.0.x
          
    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test src/XPathReader -c Release -p:Platform="Any CPU"
      
    # Build
    - name: Create NuGet package
      shell: pwsh
      env:
          VERSION_PREFIX: ${{ env.VERSION_PREFIX }}
          VERSION_SUFFIX: ${{ env.VERSION_SUFFIX }}
      run: dotnet pack src/XPathReader/XPathReader/XPathReader.csproj -c Release -p:Platform="Any CPU" /p:VersionPrefix="$($env:VERSION_PREFIX)" /p:VersionSuffix="$($env:VERSION_SUFFIX)" -o src\Release
    
    - name: Add the created package to test project and run tests
      shell: pwsh
      env:
          VERSION_PREFIX: ${{ env.VERSION_PREFIX }}
          VERSION_SUFFIX: ${{ env.VERSION_SUFFIX }}
      run: |
          dotnet restore "Package Tests\PackageUsage\PackageUsage.NetFramework.Tests\PackageUsage.NetFramework.Tests.csproj"
          dotnet restore "Package Tests\PackageUsage\PackageUsage.Net.Tests\PackageUsage.Net.Tests.csproj"
          dotnet add "Package Tests\PackageUsage\PackageUsage.NetFramework.Tests\PackageUsage.NetFramework.Tests.csproj" package  ARTX.XPathReader -s "src\Release" --prerelease
          dotnet add "Package Tests\PackageUsage\PackageUsage.Net.Tests\PackageUsage.Net.Tests.csproj" package  ARTX.XPathReader -s "src\Release" --prerelease
          dotnet test "Package Tests\PackageUsage\PackageUsage.NetFramework.Tests\PackageUsage.NetFramework.Tests.csproj" /p:VersionPrefix="$($env:VERSION_PREFIX)" /p:VersionSuffix="$($env:VERSION_SUFFIX)"
          dotnet test "Package Tests\PackageUsage\PackageUsage.Net.Tests\PackageUsage.Net.Tests.csproj" /p:VersionPrefix="$($env:VERSION_PREFIX)" /p:VersionSuffix="$($env:VERSION_SUFFIX)"
    
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: src/Release/*
        fail_on_unmatched_files: true
        prerelease: ${{ steps.source.outputs.branch == 'develop' }}
        generate_release_notes: true
    
    - name: NuGet login (OIDC â†’ temp API key)
      uses: NuGet/login@v1
      id: login
      with:
        user: ${{ secrets.NUGET_USER }}
          
    - name: Push to NuGet
      shell: pwsh
      run: |
        Get-ChildItem src/Release -Filter *.nupkg | ForEach-Object {
          dotnet nuget push $_.FullName `
            --api-key "${{ steps.login.outputs.NUGET_API_KEY }}" `
            --source https://api.nuget.org/v3/index.json
        }
